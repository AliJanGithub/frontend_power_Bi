// src/components/DashboardForm.jsx

import React from 'react';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Textarea } from '../ui/textarea';
import { Button } from '../ui/button';
import { Trash2 } from '../icons/Icons'; // Assuming you have an Icons file

// Helper functions (re-imported or defined here)
// You must move parseTags and validateTags here or import them.
// For simplicity, I'm assuming you will define them here.

// helper to parse and sanitize raw tags string -> array




// -----------------------------------------------------------

const DashboardForm = ({
Â  formData,
Â  formErrors,

Â  handleChange,
Â  handleSubmit,
Â  editingDashboard,
Â  dashboards,
Â  handleDelete,
Â  setIsEditDialogOpen,
Â  setEditingDashboard,
Â  resetForm,
Â  // We also need the function used in onBlur/onKeyDown for tags
// Â  updateFormDataTags,
}) => {

Â  // Function to handle keydown (like 'Enter') for the tags input
// Â  const handleTagsKeyDown = (e) => {
// Â  Â  if (e.key === 'Enter') {
// Â  Â  Â  e.preventDefault();
// Â  Â  Â  updateFormDataTags(tagsInput); // Call the prop function to update formData
// Â  Â  }
// Â  };
Â  
Â  // Function to handle blur for the tags input
// Â  const handleTagsBlur = () => {
// Â  Â  updateFormDataTags(tagsInput); // Call the prop function to update formData
// Â  };

Â  return (
Â  Â  <div id='dashboard-form-wrapper' className="space-y-6">
Â  Â  Â  <form onSubmit={handleSubmit} className="space-y-6">
Â  Â  Â  Â  {/* Dashboard Title */}
Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  <Label htmlFor="title" className="text-sm font-medium text-gray-900">
Â  Â  Â  Â  Â  Â  Dashboard Title *
Â  Â  Â  Â  Â  </Label>
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  id="title"
Â  Â  Â  Â  Â  Â  value={formData.title}
Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange('title', e.target.value)}
Â  Â  Â  Â  Â  Â  placeholder="Enter dashboard title"
Â  Â  Â  Â  Â  Â  className="h-11 px-4"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  {formErrors.title && (
Â  Â  Â  Â  Â  Â  <p className="text-sm text-red-600 mt-1">{formErrors.title}</p>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Description */}
Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  <Label htmlFor="description" className="text-sm font-medium text-gray-900">
Â  Â  Â  Â  Â  Â  Description *
Â  Â  Â  Â  Â  </Label>
Â  Â  Â  Â  Â  <Textarea
Â  Â  Â  Â  Â  Â  id="description"
Â  Â  Â  Â  Â  Â  value={formData.description}
Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange('description', e.target.value)}
Â  Â  Â  Â  Â  Â  placeholder="Enter a detailed description of what this dashboard contains..."
Â  Â  Â  Â  Â  Â  rows={4}
Â  Â  Â  Â  Â  Â  className="px-4 py-3 resize-none"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  {formErrors.description && (
Â  Â  Â  Â  Â  Â  <p className="text-sm text-red-600 mt-1">{formErrors.description}</p>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  


Â  Â  Â  Â  {/* Power BI Embed URL */}
Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  <Label htmlFor="embedUrl" className="text-sm font-medium text-gray-900">
Â  Â  Â  Â  Â  Â  Power BI Embed URL *
Â  Â  Â  Â  Â  </Label>
Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  id="embedUrl"
Â  Â  Â  Â  Â  Â  value={formData.embedUrl}
Â  Â  Â  Â  Â  Â  onChange={(e) => handleChange('embedUrl', e.target.value)}
Â  Â  Â  Â  Â  Â  placeholder="https://app.powerbi.com/view?r=..."
Â  Â  Â  Â  Â  Â  className="h-11 px-4 font-mono text-sm"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  {formErrors.embedUrl && (
Â  Â  Â  Â  Â  Â  <p className="text-sm text-red-600 mt-1">{formErrors.embedUrl}</p>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
Â  Â  Â  Â  Â  Â  <p className="text-xs text-blue-700 leading-relaxed">
Â  Â  Â  Â  Â  Â  Â  ðŸ’¡ <strong>How to get the embed URL:</strong><br />
Â  Â  Â  Â  Â  Â  Â  1. Open your Power BI dashboard<br />
Â  Â  Â  Â  Â  Â  Â  2. Go to File â†’ Embed â†’ Publish to web<br />
Â  Â  Â  Â  Â  Â  Â  3. Copy the provided embed URL
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
 
      {/* Department Selection */}
<div className="space-y-3">
  <Label htmlFor="department" className="text-sm font-medium text-gray-900">
    Department *
  </Label>
  <select
    id="department"
    value={formData.department}
    onChange={(e) => handleChange('department', e.target.value)}
    className="h-11 px-4 w-full border border-gray-300 rounded-md text-sm"
  >
    <option value="">Select a department</option>
    <option value="FINANCE">Finance</option>
    <option value="SALES">Sales</option>
    <option value="MARKETING">Marketing</option>
    <option value="GENERAL">General</option>
    <option value="OTHER">Other</option>
    <option value="HR">HR</option>
  </select>
  {formErrors.department && (
    <p className="text-sm text-red-600 mt-1">{formErrors.department}</p>
  )}
</div>

        
Â  Â  Â  Â  {/* Form Actions */}
Â  Â  Â  Â  <div className="flex justify-between items-center pt-6 border-t border-gray-200 mt-8 -mx-6 px-6">
Â  Â  Â  Â  Â  {editingDashboard ? (
Â  Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  Â  type="button" 
Â  Â  Â  Â  Â  Â  Â  variant="destructive"
Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  const dashboardToDelete = dashboards.find(d => d._id === editingDashboard);
Â  Â  Â  Â  Â  Â  Â  Â  if (dashboardToDelete && window.confirm(`Are you sure you want to delete "${dashboardToDelete.title}"?`)) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDelete(editingDashboard, dashboardToDelete.title);
Â  Â  Â  Â  Â  Â  Â  Â  Â  setIsEditDialogOpen(false);
Â  Â  Â  Â  Â  Â  Â  Â  Â  setEditingDashboard(null);
Â  Â  Â  Â  Â  Â  Â  Â  Â  resetForm();
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  className="px-6 py-2"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <Trash2 className="h-4 w-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Delete Dashboard
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div></div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <div className="flex space-x-3">
Â  Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  Â  type="button" 
Â  Â  Â  Â  Â  Â  Â  variant="outline" 
Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  resetForm();
Â  Â  Â  Â  Â  Â  Â  Â  setIsEditDialogOpen(false);
Â  Â  Â  Â  Â  Â  Â  Â  setEditingDashboard(null);
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  className="px-6 py-2"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  className="px-6 py-2"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {editingDashboard ? 'Update Dashboard' : 'Add Dashboard'}
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </form>
Â  Â  </div>
Â  );
};

// Use React.memo to prevent unnecessary re-renders when parent state changes 
// (e.g., isAddDialogOpen or isEditDialogOpen) but none of the form props do.
export default React.memo(DashboardForm);